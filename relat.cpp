#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>

using namespace std;

class Account {
public:
    string username;
    string password;
    string role; // user –∏–ª–∏ admin

    Account(string uname, string pwd, string r) {
        username = uname;
        password = pwd;
        role = r;
    }
};

vector<Account> accounts;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
void loadAccounts() {
    ifstream file("accounts.txt");
    if (!file.is_open()) return;

    string username, password, role;
    while (file >> username >> password >> role) {
        accounts.push_back(Account(username, password, role));
    }
    file.close();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª
void saveAccounts() {
    ofstream file("accounts.txt");
    for (const auto& acc : accounts) {
        file << acc.username << " " << acc.password << " " << acc.role << endl;
    }
    file.close();
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
Account* registerAccount() {
    string username, password;
    cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ";
    cin >> username;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    for (const auto& acc : accounts) {
        if (acc.username == username) {
            cout << "–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!\n";
            return nullptr;
        }
    }

    cout << "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
    cin >> password;

    accounts.push_back(Account(username, password, "user"));
    saveAccounts();

    cout << "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n";
    return &accounts.back();
}

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
Account* login() {
    string username, password;
    cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ";
    cin >> username;
    cout << "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
    cin >> password;

    for (auto& acc : accounts) {
        if (acc.username == username && acc.password == password) {
            cout << "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n";
            return &acc;
        }
    }

    cout << "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n";
    return nullptr;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
void showAccounts() {
    cout << "üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
    for (const auto& acc : accounts) {
        cout << "üë§ –õ–æ–≥–∏–Ω: " << acc.username << " | –†–æ–ª—å: " << acc.role << endl;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
void deleteUser() {
    string username;
    cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ";
    cin >> username;

    for (auto it = accounts.begin(); it != accounts.end(); ++it) {
        if (it->username == username) {
            accounts.erase(it);
            saveAccounts();
            cout << "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.\n";
            return;
        }
    }

    cout << "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n";
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
void setPermission() {
    string username, newRole;
    cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ";
    cin >> username;
    cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (user/admin): ";
    cin >> newRole;

    for (auto& acc : accounts) {
        if (acc.username == username) {
            if (newRole == "user" || newRole == "admin") {
                acc.role = newRole;
                saveAccounts();
                cout << "‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n";
            } else {
                cout << "‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'user' –∏–ª–∏ 'admin'.\n";
            }
            return;
        }
    }

    cout << "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n";
}

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
void changePassword(Account* user) {
    string newPassword;
    cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ";
    cin >> newPassword;

    user->password = newPassword;
    saveAccounts();
    cout << "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n";
}

// –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
void showTimestamp() {
    time_t now = time(0);
    char* dt = ctime(&now);
    cout << "üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " << dt;
}

// –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Windows)
void clearScreen() {
    system("cls");
}

// –¶–∏–∫–ª –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
void commandLoop(Account* user) {
    bool loggedIn = true;

    while (loggedIn) {
        cout << "\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (help –¥–ª—è —Å–ø–∏—Å–∫–∞): ";
        string command;
        cin >> command;

        if (command == "help") {
            cout << "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
            cout << "üîπ help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n";
            cout << "üîπ status ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n";
            cout << "üîπ changepw ‚Äî —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å\n";
            cout << "üîπ echo <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç\n";
            cout << "üîπ timestamp ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n";
            cout << "üîπ clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω (—Ç–æ–ª—å–∫–æ Windows)\n";
            cout << "üîπ exit ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n";
            if (user->role == "admin") {
                cout << "üîπ showusers ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
                cout << "üîπ deluser ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
                cout << "üîπ setperm ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
            }
        } else if (command == "status") {
            cout << "üë§ –õ–æ–≥–∏–Ω: " << user->username << "\n";
            cout << "üõ† –†–æ–ª—å: " << user->role << "\n";
        } else if (command == "changepw") {
            changePassword(user);
        } else if (command == "echo") {
            string message;
            getline(cin >> ws, message);
            cout << "üì¢ " << message << endl;
        } else if (command == "timestamp") {
            showTimestamp();
        } else if (command == "clear") {
            clearScreen();
        } else if (command == "exit") {
            loggedIn = false;
            cout << "üö™ –í—ã—Ö–æ–¥...\n";
        } else if (command == "showusers" && user->role == "admin") {
            showAccounts();
        } else if (command == "deluser" && user->role == "admin") {
            deleteUser();
        } else if (command == "setperm" && user->role == "admin") {
            setPermission();
        } else {
            cout << "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n";
        }
    }
}

int main() {
    loadAccounts();

    while (true) {
        cout << "\nüîπ 1. –í—Ö–æ–¥\nüîπ 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüîπ 3. –í—ã—Ö–æ–¥\n‚û° –í—ã–±–æ—Ä: ";
        int choice;
        cin >> choice;

        if (choice == 1) {
            Account* user = login();
            if (user) commandLoop(user);
        } else if (choice == 2) {
            Account* newUser = registerAccount();
            if (newUser) commandLoop(newUser);
        } else if (choice == 3) {
            cout << "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n";
            break;
        } else {
            cout << "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n";
        }
    }

    return 0;
}